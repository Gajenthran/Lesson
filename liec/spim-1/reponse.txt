Exercice 1.
3. Rien ne se lance. Il lance par défaut main mais main n'est pas défini.
The following symbols are undefined:
main

Instruction references undefined symbol at 0x00400014
  [0x00400014]  0x0c000000  jal 0x00000000 [main]           ; 188: jal main


5. Le programme "main.s" a été lancé correctement. Aucun message d'erreur.


6. Il est entré dans le main et a retourné l'adresse de retour de la fonction.


7(a). Le label "main" est défini deux fois donc il n'execute pas (car il prend en compte le "main" de main.s). 
spim: (parser) Label is defined for the second time on line 4 of file basic.s
      main:
          ^


9. 
  nop                   # initialise les valeurs
  li $t0, 42            # on met la valeur 42 dans t0
  li $t1, 9             # on met la valeur 9 dans t1
  add $t2, $t0, $t1     # on additionne t0 et t1 et on met le resultat dans t2 (t2 = t0 + t1 donc t2 = 51)
  move $a0, $t2         # on met la valeur de t2 dans a0 (a0 = t2 donc a0 = 51)
  li $v0, 1             # on met la valeur 1 dans v0 (1 = print_int - afficher l'entier)
  syscall               # appel du système pour executer une instruction selon la valeur de v0 (afficher 51 ici)
  jr $ra



Exercice 2.
2.
main:
  li $v0, 4         # v0 = 4 (= print_string - afficher la chaîne)
  la $a0, num1q     # a0 = #num1q (= adresse de la chaîne en mémoire)
  syscall           # execute l'instruction selon la valeur de v0 (ici 4 donc afficher la chaîne a0 )

  li $v0, 5         # v0 = 5 (= read_int - lire un entier en entrée = equivalent d'un scanf)
  syscall           # execute l'instruction selon la valeur de v0 (ici 5 donc lire un entier en entrée)
  move $t0, $v0     # t0 = v0 (on récupère la valeur retournée par l'appel de read_int)

  li $v0, 4         # v0 = 4 (= print_string - afficher la chaîne)
  la $a0, num2q     # a0 = #num2q (= adresse de la chaîne en mémoire)
  syscall           # execute l'instruction selon la valeur de v0 (ici 4 donc afficher la chaîne a0)

  li $v0, 5         # v0 = 5 (= read_int - lire un entier en entrée = equivalent d'un scanf)
  syscall           # execute l'instruction selon la valeur de v0 (ici 5 donc lire un entier en entrée)
  move $t1, $v0     # t1 = v0  (on récupère la valeur retournée par l'appel de read_int)

  li $v0, 4         # v0 = 4 (= print_string - afficher la chaîne)
  la $a0, sum       # a0 = #sum (= adresse de la chaîne en mémoire)
  syscall           # execute l'instruction selon la valeur de v0 (ici 4 donc afficher la chaîne a0)

  add $a0, $t0, $t1 # a0 = t0 + t1
  li $v0, 1         # v0 = 1 (= print_int - afficher un nombre entier)
  syscall           # execute l'instruction selon la valeur de v0 (ici 1 donc afficher l'entier a0)

  li $v0, 4         # v0 = 4 (= print_string - afficher la chaîne)
  la $a0, nl        # a0 = #nl (= adresse de la chaîne en mémoire)
  syscall           # execute l'instruction selon la valeur de v0 (ici 4 donc afficher la chaîne a0)

  jr $ra

.data
num1q: .asciiz "Please enter a first number: "      # on met une chaîne de caractères dans num1q
num2q: .asciiz "Please enter a second number: "     # on met une chaîne de caractères dans num2q
sum: .asciiz "The sum of these numbers is: "        # on met une chaîne de caractères dans sum
nl: .asciiz "\n"                                    # on met une chaîne de caractères dans nl

La valeur retournée par read_int est dans v0. On peut donc stocker cette valeur contenue dans v0 dans un autre registre (temporaire) comme dans le fichier "add.s".


3. Le programme continue de tourner, il ne s'arrête pas.


4. Le problème vient des "jr $ra".
On se déplace vers la fonction "add_user_num". À la fin de la fonction, on retourne l'adresse de retour de la fonction à savoir "main" (jr $ra). Puis en sortant de la fonction, on se retrouve encore une fois sur "jr $ra". Or, "$ra" contient "main", donc on se retrouve avec une boucle infinie.


5. L'idée est de conserver la valeur de "$ra" dans un registre temporaire T avant de se déplacer vers la fonction "add_user_num".


6. Les registres sont limités. De plus, il faut vérifier si le registre qui stocke "$ra" n'est pas utilisé ailleurs dans le code (ce qui devient difficile lorsqu'on traîte un programme de grande taille).


7. Utiliser une pile qui va pouvoir stocker les éléments.


8.
main:
  li $t2, 3               # t2 = 3 (on va donc boucler trois fois)

loop:                     # debut de la boucle avec le label "loop"
  beq $t2, $0, end_loop   # if(t2 == 0): on va dans le label "end_loop" qui signale la fin de la boucle
  addi $t2, $t2, -1       # t2 = t2 - 1
  jal add_user_num        # appel de add_user_num
  b loop                  # on rappelle le label "loop"

end_loop:                 # le label "end_loop"
  li $v0, 10              # v0 = 10 (= exit - quitter le programme)
  syscall                 # executer v0 donc quitte le programme

On crée un label (ici "loop") et recommence à parcourir la "loop" (avec l'instruction "b") tant que la condition n'est pas validée (beq). Si la condition est validée, on se dirige vers le label "end_loop" qui représente la fin de la boucle.


Exercice 3.
Voir "sum.s"